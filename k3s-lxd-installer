#!/bin/sh
set -e

# Defaults
install_agent=true
install_server=true
server_name=k3s-server
agent_name=k3s-agent
image=ubuntu:focal

usage() {
  cat << EOF >&2
Install k3s server and agent into LXD containers for testing and development. Running this with no options will create 2 containers called k3s-server and k3s-agent.

Usage: $0 [-S] [-A] [-s <server-name>] [-a <agent-name>] [-u <url>] [-t <token]

              -S: Only install k3s server container
              -A: Only install k3s agent container
-s <server-name>: Name to use for server container
 -a <agent-name>: Name to use for agent container
        -u <url>: (needed with -a) Url for k3s server
      -t <token>: (needed with -a) Token for k3s server
      -i <image>: lxc image name (default ubuntu:focal)


EOF
  exit 0
}

while getopts SAs:a:u:t:i: opt; do
  case $opt in
    (S) install_agent=false;;
    (A) install_server=false;;
    (s) server_name=$OPTARG;;
    (a) agent_name=$OPTARG;;
    (u) server_url=$OPTARG;;
    (t) token=$OPTARG;;
    (i) image=$OPTARG;;
    (*) usage
  esac
done

if ! jq -h > /dev/null 2>&1; then
  echo "Please install the 'jq' package before continuing"
  exit 1
fi

if [ "$install_server" = "false" ] && { [ -z "$server_url" ] || [ -z "$token" ]; }; then
  echo ERROR: must provide -u and -t with -A
  echo
  usage
fi

if [ "$install_server" = "true" ]; then
  echo "Installing k3s server on $server_name"
  lxc init "$image" "$server_name"
  lxc config set "$server_name" linux.kernel_modules br_netfilter
  lxc config set "$server_name" linux.kernel_modules overlay
  lxc config set "$server_name" security.privileged true
  lxc config set "$server_name" security.nesting true
  lxc config set "$server_name" raw.lxc "lxc.mount.auto = proc:rw sys:rw"
  echo "L /dev/kmsg - - - - /dev/console" > /tmp/$$-kmsg.conf
  lxc file push /tmp/$$-kmsg.conf "$server_name"/etc/tmpfiles.d/$$-kmsg.conf
  rm /tmp/$$-kmsg.conf
  lxc start "$server_name"
  echo Waiting for server to come up...
  while ! lxc info "$server_name" |grep -qP "eth0:\tinet\t"; do
      sleep 1
  done
  server_ip=$(lxc query /1.0/containers/"$server_name"/state |jq -r .network.eth0.addresses[0].address)
  lxc exec "$server_name" -- bash -c  "curl -sfL https://get.k3s.io | sh -"
  lxc exec "$server_name" -- bash -c  "sed -i 's/^\(.*modprobe.*\)$/#\1/' /etc/systemd/system/k3s.service"
  lxc exec "$server_name" -- bash -c  "sed -i 's/server /server --snapshotter native/' /etc/systemd/system/k3s.service"
  lxc exec "$server_name" -- bash -c  "systemctl daemon-reload"
  lxc exec "$server_name" -- bash -c  "reboot"
fi

if [ "$install_agent" = "true" ]; then
  echo "Installing k3s agent on $agent_name"
  lxc init "$image" "$agent_name"
  lxc config set "$agent_name" linux.kernel_modules br_netfilter
  lxc config set "$agent_name" linux.kernel_modules overlay
  lxc config set "$agent_name" security.privileged true
  lxc config set "$agent_name" security.nesting true
  lxc config set "$agent_name" raw.lxc "lxc.mount.auto = proc:rw sys:rw"
  echo 'L /dev/kmsg - - - - /dev/console' > /tmp/$$-kmsg.conf
  lxc file push /tmp/$$-kmsg.conf "$agent_name/etc/tmpfiles.d/$$-kmsg.conf"
  rm /tmp/$$-kmsg.conf
  lxc start "$agent_name"
  echo Waiting for agent to come up...
  while ! lxc info "$agent_name" |grep -qP "eth0:\tinet\t"; do
      sleep 1
  done
  server_url="${server_url:-https://$server_ip:6443}"
  if [ -z "$token" ]; then
    token=$(lxc exec "$server_name" -- cat /var/lib/rancher/k3s/server/node-token)
  fi
  lxc exec "$agent_name" -- bash -c  "curl -sfL https://get.k3s.io | K3S_TOKEN=$token K3S_URL=$server_url sh -"
  lxc exec "$agent_name" -- bash -c  "sed -i 's/^\(.*modprobe.*\)$/#\1/' /etc/systemd/system/k3s-agent.service"
  lxc exec "$agent_name" -- bash -c  "sed -i 's/agent /agent --snapshotter native/' /etc/systemd/system/k3s-agent.service"
  lxc exec "$agent_name" -- bash -c  "systemctl daemon-reload"
  lxc exec "$agent_name" -- bash -c  "reboot"
fi

echo
echo "*********************************"
echo k3s installation complete!
echo "lxd server instance: $server_name"
echo "lxd agent instance: $agent_name"
echo
